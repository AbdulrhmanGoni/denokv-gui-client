---
import kvEntriesScreenshotLight from "../assets/kv-entries-table-screenshot-light.png";
import kvStoresScreenshotLight from "../assets/kv-stores-screenshot-light.png";
import entriesCrudScreenshotLight from "../assets/entries-crud-screenshot-light.png";
import Wave from "../assets/wave.svg";
---

<section id="features-1" class="bg-surface">
  <div class="container">
    <div class="features-text">
      <h2>Create Deno KV DB Connections</h2>
      <p>
        Create connections to your <strong>Deno Key-Value</strong> databases which
        can be <strong>local</strong> or <strong>remote</strong> connection, and
        switch between them easily
      </p>
    </div>
    <img src={kvStoresScreenshotLight.src} alt="KV Stores list screenshot" />
  </div>
  <div class="background-gradient-ltr flex items-start">
    <Wave style="transform: translateY(-1px) rotate(180deg);" />
  </div>
</section>

<section id="features-2" class="background-gradient-ltr">
  <div class="container">
    <img
      src={kvEntriesScreenshotLight.src}
      alt="KV Entries screenshot"
      loading="lazy"
    />
    <div class="features-text">
      <h2>Open and browse a Deno KV DB</h2>
      <p>
        Pick one of your connections to your Deno KV databases and open it, so
        you can <strong>browse</strong> the entries inside the database and perform
        <strong>filters</strong>.
      </p>
    </div>
  </div>
</section>

<section id="features-3" class="bg-surface">
  <div
    class="background-gradient-ltr"
    style="display: flex; align-items: flex-end;"
  >
    <Wave style="transform: translateY(1px)" />
  </div>
  <div class="container">
    <div class="features-text">
      <h2>Add, Edit or Delete Kv Entries</h2>
      <p>
        Perform the
        <strong>C</strong><span class="opacity-70">R</span><strong>UD</strong>
        operations on your Deno KV databases through a simple and easy to use UI
      </p>
    </div>
    <img
      src={entriesCrudScreenshotLight.src}
      alt="A CRUD operation screenshot"
      loading="lazy"
    />
  </div>
  <div class="background-gradient-rtl">
    <Wave style="transform: translateY(-1px) rotate(180deg);" />
  </div>
</section>

<style>
  .container {
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1;
    flex-direction: column;
    text-align: center;
    gap: 20px;
  }

  .features-text {
    max-width: 550px;
    order: 1;
    h2 {
      font-size: 30px;
      margin-bottom: 8px;
      font-weight: 800;
    }

    p {
      font-size: 17px;
      color: var(--color-muted-foreground);
    }
  }

  img {
    max-width: 700px;
    width: 100%;
    border-radius: 10px;
    box-shadow: var(--box-shadow);
    order: 2;
  }

  svg {
    width: 100%;
    fill: var(--color-surface);
  }

  @media (width >= 80rem) {
    .container {
      flex-direction: row;
      justify-content: space-evenly;
      text-align: start;

      img,
      .features-text {
        order: initial;
      }
    }
  }

  @media (width >= 40rem) {
    .features-text {
      h2 {
        font-size: 36px;
      }

      p {
        font-size: 19px;
      }
    }
  }
</style>
